type: object
properties:
  meta:
    type: object
    properties:
      homepage:
        anyOf:
          - type: "null"
          - { type: string, format: url }

      license: { type: ["null", string] }
      author: { type: ["null", string] }

      dependabot:
        type: object
        properties:
          npm:
            type: object
            properties:
              interval:
                anyOf:
                  - type: "null"
                  - enum: [daily, weekly, monthly]
              day: { type: string, format: weekday }
              time: { type: string, format: time }
              timezone: { type: string, format: timezone }
              open-pull-requests-limit: { type: integer, minimum: 0 }

            additionalProperties: false

          docker:
            type: object
            properties:
              interval:
                anyOf:
                  - type: "null"
                  - enum: [daily, weekly, monthly]
              day: { type: string, format: weekday }
              time: { type: string, format: time }
              timezone: { type: string, format: timezone }
              open-pull-requests-limit: { type: integer, minimum: 0 }

            additionalProperties: false

          github-actions:
            type: object
            properties:
              interval:
                anyOf:
                  - type: "null"
                  - enum: [daily, weekly, monthly]
              day: { type: string, format: weekday }
              time: { type: string, format: time }
              timezone: { type: string, format: timezone }
              open-pull-requests-limit: { type: integer, minimum: 0 }

            additionalProperties: false
        additionalProperties: false

      executables:
        anyOf:
          - type: "null"
          - type: array
            items: { type: string }
            minItems: 1
            uniqueItems: true

      repository:
        type: object
        properties:
          archived: { type: ["null", boolean] }
          private: { type: ["null", boolean] }
          visibility:
            anyOf:
              - type: "null"
              - enum: [public, private]

          hasIssues: { type: ["null", boolean] }
          hasDiscussions: { type: ["null", boolean] }
          hasWiki: { type: ["null", boolean] }
          hasProjects: { type: ["null", boolean] }
          defaultBranch: { type: ["null", string] }
          allowForking: { type: ["null", boolean] }
          webCommitSignoffRequired: { type: ["null", boolean] }

          secretScanning:
            anyOf:
              - type: "null"
              - enum: [enabled, disabled]

          secretScanningPushProtection:
            anyOf:
              - type: "null"
              - enum: [enabled, disabled]

          vulnerabilityAlerts: { type: ["null", boolean] }
          dependabotsecurityupdates: { type: ["null", boolean] }
          privateVulnerabilityReporting: { type: ["null", boolean] }

        additionalProperties: false

    additionalProperties: false
    required: [dependabot, executables, repository]

  subPackages:
    anyOf:
      - type: "null"
      - type: array
        items: { type: string, format: glob-pattern, pattern: ^/ }
        minItems: 1
        uniqueItems: true

  release:
    type: object
    properties:
      enabled: { type: boolean }
      branches: { type: array, items: { type: string }, uniqueItems: true, minItems: 1 }
    additionalProperties: false
    required: [enabled, branches]

  docker:
    type: object
    properties:
      composeFile:
        anyOf:
          - type: string
          - type: array
            items: { type: string }
            minItems: 1
            uniqueItems: true

      defaultTag: { type: ["null", string] }
      autoTags:
        anyOf:
          - type: "null"
          - type: array
            items: { type: string }
            minItems: 1
            uniqueItems: true

    additionalProperties: false
    required: []

  commits:
    type: object
    properties:
      requireType: { type: boolean }
      strictType: { type: boolean }

      types:
        type: object
        propertyNames: { type: string, format: kebab-case }
        additionalProperties:
          type: object
          properties:
            title: { type: string }
            notableChange: { type: boolean }
            other: { type: boolean }
            requireScope: { type: boolean }
            strictScope: { type: boolean }
          additionalProperties: false
          required: [notableChange, requireScope, strictScope]

      scopes:
        anyOf:
          - type: "null"
          - { type: array, items: { type: string, format: kebab-case }, minItems: 1, uniqueItems: true }

      otherScopes:
        anyOf:
          - type: "null"
          - { type: array, items: { type: string, format: kebab-case }, minItems: 1, uniqueItems: true }

    additionalProperties: false
    required: [requireType, strictType, types, scopes, otherScopes]

  docs:
    anyOf:
      - type: "null"
      - type: object
        properties:
          location: { enum: [/, /docs] }
          aliases: { type: object, additionalProperties: { type: string, format: uri } }

          app:
            type: object
            properties:
              api:
                type: object
                properties:
                  url: { type: string, format: uri }

                additionalProperties: false
                required: [url]
              rpc:
                type: object
                properties:
                  url: { type: string, format: uri }

                additionalProperties: false
                required: [url]

            additionalProperties: false
            required: []

          changelog:
            anyOf:
              - { type: boolean }
              - { type: string, format: uri }

          favicon: { type: string }
          generateReadme: { type: boolean }
          logo:
            anyOf:
              - { type: boolean }
              - { type: string, format: uri }
              - type: object
                properties:
                  href: { type: string, format: uri }
                  width: { type: integer, minimum: 32 }
                  height: { type: integer, minimum: 32 }

                additionalProperties: false
                required: [href]

          name: { type: string }
          siteURL: { type: string, format: uri }
          subMaxLevel: { type: integer, minimum: 0 }
          types:
            anyOf:
              - type: "null"
              - type: object
                additionalProperties:
                  type: ["null", string]

          externalTypes: { type: array, items: { type: string }, uniqueItems: true }

        additionalProperties: false
        required: [location]

additionalProperties: false
required: [meta, release, commits]
